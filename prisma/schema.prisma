
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String?
  fullName    String
  phoneNumber1 String
  phoneNumber2 String?
  amount      Float?   @default(0)
  userType    String   @default("customer") // Could be: customer, errander, admin
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      String @default("active")

  // Errander-specific fields (nullable for non-erranders)
  whatsappNumber  String?
  school          String?
  homeAddress     String?
  idCardUrl       String?
  idCardFileName  String?
  isVerified      Boolean  @default(false)
  verifiedAt      DateTime?
  verifiedBy      String?  @db.ObjectId
  
  // Application Status (for erranders)
  erranderStatus  String?  @default("PENDING") // PENDING, APPROVED, REJECTED, SUSPENDED

  // Relations
  sentDeliveries  Delivery[] @relation("SenderDeliveries")
  assignedDeliveries Delivery[] @relation("ErranderDeliveries")

  @@map("users")
}

model Delivery {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId              String   @db.ObjectId
  erranderId            String?  @db.ObjectId
  
  // Denormalized sender info (optional, for performance)
  senderName            String?
  senderPhone1          String?
  
  // Item information
  itemType              String
  itemDescription       String?
  
  // Delivery information  
  deliveryAddress       String
  recipientName         String
  recipientPhoneNumber  String
  amount      Float?   @default(0)
  
  // Package tracking and status
  status                String   @default("PENDING")
  trackingNumber        String         @unique @default(cuid())
  
  // Timestamps
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  estimatedDeliveryDate DateTime?
  actualDeliveryDate    DateTime?
  
  // Additional fields
  packageWeight         Float?
  packageDimensions     String? 
  deliveryFee           Float?
  specialInstructions   String?

  
  sender                User?    @relation("SenderDeliveries", fields: [senderId], references: [id])
  errander              User?    @relation("ErranderDeliveries", fields: [erranderId], references: [id])

  @@map("deliveries")
}